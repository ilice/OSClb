upstream oscweb {
  ip_hash;
  server oscweb:8000;
}

upstream oscapi {
  ip_hash;
  server oscapi:8000;
}

upstream kibana {
  ip_hash;
  server kibana:5601;
}

upstream elastic {
  ip_hash;
  server elastic:9200;
}

upstream jupyter {
  ip_hash;
  server jupyter:8888 fail_timeout=0;
}

map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
}

# https://opensmartcountry.com

server {
  location /.well-known/acme-challenge {
    proxy_pass http://letsencrypt:443;
    proxy_set_header Host            $host;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto https;
  }

  location /api/ {
    proxy_set_header Host            $host;
    proxy_set_header X-Forwarded-For $remote_addr;
    add_header 'Access-Control-Allow-Origin' '*';
    proxy_pass http://oscapi/;
  }

  location / {
    proxy_pass http://oscweb/;
  }

  listen 443;

  ssl    on;
  ssl_certificate /etc/letsencrypt/live/__www.opensmartcountry.com__/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/__www.opensmartcountry.com__/privkey.pem;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  ssl_prefer_server_ciphers on;

  ssl_session_cache shared:SSL:10m;
  ssl_dhparam /etc/ssl/private/dhparam.pem;

  server_name __www.opensmartcountry.com__;
}

# https://api.opensmartcountry.com

server {
  location /.well-known/acme-challenge {
    proxy_pass http://letsencrypt:443;
    proxy_set_header Host            $host;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto https;
  }

  location / {
    proxy_set_header Host            $host;
    proxy_set_header X-Forwarded-For $remote_addr;
    add_header 'Access-Control-Allow-Origin' '*';
    proxy_pass http://oscapi/;
  }

  listen 443;

  ssl    on;
  ssl_certificate /etc/letsencrypt/live/__api.opensmartcountry.com__/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/__api.opensmartcountry.com__/privkey.pem;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  ssl_prefer_server_ciphers on;

  ssl_session_cache shared:SSL:10m;
  ssl_dhparam /etc/ssl/private/dhparam.pem;

  server_name __api.opensmartcountry.com__;
}

# https://kibana.opensmartcountry.com

server {

  location /.well-known/acme-challenge {
    proxy_pass http://letsencrypt:443;
    proxy_set_header Host            $host;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto https;
  }

  location / {
    auth_basic             "Troyan Horse's Area";
    auth_basic_user_file   conf.d/.htpasswd;

    proxy_set_header   Host              $host;
    proxy_set_header   X-Real-IP         $remote_addr;
    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;

    proxy_pass http://kibana/;
  }
  listen 443;

  ssl    on;
  ssl_certificate /etc/letsencrypt/live/__www.opensmartcountry.com__/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/__www.opensmartcountry.com__/privkey.pem;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  ssl_prefer_server_ciphers on;

  ssl_session_cache shared:SSL:10m;
  ssl_dhparam /etc/ssl/private/dhparam.pem;

  server_name __kibana.opensmartcountry.com__;
}

# https://elastic.opensmartcountry.com

server {
  location /.well-known/acme-challenge {
    proxy_pass http://letsencrypt:443;
    proxy_set_header Host            $host;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto https;
  }

  location / {
    allow __alowedIP__;
    deny  all;

    proxy_set_header   Host              $host;
    proxy_set_header   X-Real-IP         $remote_addr;
    proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header   X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;

    proxy_pass http://elastic/;
  }
  listen 443;

  ssl    on;
  ssl_certificate /etc/letsencrypt/live/__www.opensmartcountry.com__/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/__www.opensmartcountry.com__/privkey.pem;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  ssl_prefer_server_ciphers on;

  ssl_session_cache shared:SSL:10m;
  ssl_dhparam /etc/ssl/private/dhparam.pem;

  server_name __elastic.opensmartcountry.com__;
}

# https://jupyter.opensmartcountry.com

server {
  location /.well-known/acme-challenge {
    proxy_pass http://letsencrypt:443;
    proxy_set_header Host            $host;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Proto https;
  }

  location / {
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    proxy_pass http://jupyter;
  }

  location ~* /(api/kernels/[^/]+/(channels|iopub|shell|stdin)|terminals/websocket)/? {
    proxy_pass http://jupyter;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

  }

  listen 443;

  ssl    on;
  ssl_certificate /etc/letsencrypt/live/__www.opensmartcountry.com__/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/live/__www.opensmartcountry.com__/privkey.pem;
  ssl_session_timeout 5m;
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';
  ssl_prefer_server_ciphers on;

  ssl_session_cache shared:SSL:10m;
  ssl_dhparam /etc/ssl/private/dhparam.pem;

  server_name __jupyter.opensmartcountry.com__;
}

# opensmartcountry http to https
server {
  listen 80;
  server_name __www.opensmartcountry.com__;
  return 301 https://$server_name$request_uri;
}

# api http to https
server {
  listen 80;
  server_name __api.opensmartcountry.com__;
  return 301 https://$server_name$request_uri;
}

# elastic http to https
server {
  listen 80;
  server_name __elastic.opensmartcountry.com__;
  return 301 https://$server_name$request_uri;
}

# kibana http to https
server {
  listen 80;
  server_name __kibana.opensmartcountry.com__;
  return 301 https://$server_name$request_uri;
}

# www, .es, .org (http and https) to opensmartcountry.com
server {
  listen 80;
  listen 443;
  server_name www.opensmartcountry.com opensmartcountry.es opensmartcountry.org www.opensmartcountry.es www.opensmartcountry.org;
  return 301 https://__www.opensmartcountry.com__$request_uri;
}
